#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∑–∞–ø—É—Å–∫ CVE Info Bot —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º CVE
"""

import asyncio
import sys
import os
import signal
import logging
from pathlib import Path
from datetime import datetime, timedelta
import sqlite3

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from bot.utils.logging_config import setup_logging, get_logger, log_system_info
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∏ UTC+3
setup_logging()
logger = get_logger(__name__)

class BotManager:
    def __init__(self):
        self.bot_task = None
        self.update_task = None
        self.full_load_task = None  # –§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö CVE
        self.running = False
        self.last_update = None
        self.last_cve_id = None
        
    async def check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
        if not Path(".env").exists():
            logger.error("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å TELEGRAM_TOKEN")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not Path("db/cve.db").exists():
            logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
            try:
                from db.init_db import init_db
                init_db()
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è CVE –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not await self.check_cve_database():
            logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö CVE –ø—É—Å—Ç–∞. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            if not await self.initialize_cve_database():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ CVE –¥–∞–Ω–Ω—ã–µ")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama
        try:
            import subprocess
            result = subprocess.run(['ollama', '--version'], capture_output=True, text=True, timeout=5)
            if result.returncode != 0:
                logger.warning("‚ö†Ô∏è Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω. AI-–∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except (FileNotFoundError, subprocess.TimeoutExpired):
            logger.warning("‚ö†Ô∏è Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω. AI-–∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
    
    async def check_cve_database(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è CVE –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(Config.DB_PATH)
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM cve")
            count = cursor.fetchone()[0]
            conn.close()
            
            if count > 0:
                logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç {count:,} CVE")
                return True
            else:
                logger.info("‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö CVE –ø—É—Å—Ç–∞")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    async def check_cve_statistics(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ CVE –≤ NVD –∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ CVE...")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ CVE –≤ NVD
            nvd_count = await self.get_nvd_cve_count()
            if nvd_count:
                logger.info(f"üìä CVE –≤ NVD: {nvd_count:,}")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ CVE –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect(Config.DB_PATH)
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM cve")
            db_count = cursor.fetchone()[0]
            conn.close()
            
            logger.info(f"üìä CVE –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_count:,}")
            
            if nvd_count and db_count:
                percentage = (db_count / nvd_count) * 100
                logger.info(f"üìä –ü–æ–∫—Ä—ã—Ç–∏–µ: {percentage:.3f}% ({db_count:,}/{nvd_count:,})")
                
                if percentage < 50:
                    logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CVE")
                    return True  # –ù—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                else:
                    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–Ω–∞—è")
                    return False  # –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
            
            return db_count < 100000  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 100k CVE, –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ CVE: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
    
    async def initialize_cve_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö CVE —Å —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limiting"""
        try:
            from bot.services.collector import load_all_cves
            
            logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ CVE –¥–∞–Ω–Ω—ã–µ...")
            logger.info("üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–∑-–∑–∞ rate limiting...")
            
            success = await load_all_cves()
            
            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                conn = sqlite3.connect(Config.DB_PATH)
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM cve")
                count = cursor.fetchone()[0]
                conn.close()
                
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {count:,} CVE")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å CVE –¥–∞–Ω–Ω—ã–µ")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CVE –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    async def full_cve_load_background(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö CVE –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö CVE...")
            logger.info("üí° –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤, –Ω–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CVE –≤ NVD
            nvd_count = await self.get_nvd_cve_count()
            if nvd_count:
                logger.info(f"üìä –í—Å–µ–≥–æ CVE –≤ NVD: {nvd_count:,}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å –±–æ–ª—å—à–∏–º –ª–∏–º–∏—Ç–æ–º
            success = await self.load_all_cves_with_limit(300000)  # 300k CVE
            
            if success:
                conn = sqlite3.connect(Config.DB_PATH)
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM cve")
                count = cursor.fetchone()[0]
                conn.close()
                
                logger.info(f"üéâ –§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CVE –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ CVE: {count:,}")
                
                # –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ CVE –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å EPSS
                logger.info("üìä –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É EPSS –¥–∞–Ω–Ω—ã—Ö...")
                from bot.services.collector import load_epss_data
                epss_success = await load_epss_data()
                if epss_success:
                    logger.info("‚úÖ EPSS –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                else:
                    logger.warning("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å EPSS –¥–∞–Ω–Ω—ã–µ")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ CVE")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    async def get_nvd_cve_count(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CVE –≤ NVD"""
        try:
            from bot.services.collector import fetch_cve
            data = await fetch_cve(start_index=0, results_per_page=1)
            return data.get('totalResults', 0)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ CVE –∏–∑ NVD: {e}")
            return None
    
    async def load_all_cves_with_limit(self, max_cves=300000):
        """–ó–∞–≥—Ä—É–∑–∫–∞ CVE —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º"""
        try:
            from bot.services.collector import fetch_cve
            import aiohttp # type: ignore
            
            logger.info(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ {max_cves:,} CVE...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CVE
            initial_data = await fetch_cve(start_index=0, results_per_page=1)
            total_results = initial_data.get('totalResults', 0)
            logger.info(f"üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ CVE: {total_results:,}")
            
            if total_results == 0:
                logger.error("No CVEs found in NVD")
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï CVE, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 300k
            max_cves = total_results  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ CVE
            page_size = 1000
            total_pages = (max_cves + page_size - 1) // page_size
            
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï {max_cves:,} CVE –≤ {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü...")
            
            all_vulnerabilities = []
            
            for page in range(total_pages):
                start_index = page * page_size
                current_page_size = min(page_size, max_cves - start_index)
                
                if page % 10 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 —Å—Ç—Ä–∞–Ω–∏—Ü
                    logger.info(f"üìÑ –§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {page}/{total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü ({len(all_vulnerabilities):,} CVE)")
                
                try:
                    data = await fetch_cve(start_index=start_index, results_per_page=current_page_size)
                    vulnerabilities = data.get('vulnerabilities', [])
                    
                    if vulnerabilities:
                        all_vulnerabilities.extend(vulnerabilities)
                    else:
                        logger.warning(f"‚ö†Ô∏è  No CVEs found on page {page + 1}")
                        break
                        
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    if page < total_pages - 1:
                        await asyncio.sleep(2.0)
                        
                except Exception as e:
                    logger.error(f"‚ùå Error loading page {page + 1}: {e}")
                    if page < total_pages - 1:
                        await asyncio.sleep(10)  # –ë–æ–ª—å—à–µ –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    continue
            
            if all_vulnerabilities:
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(all_vulnerabilities):,} CVE –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
                from bot.services.collector import save_cve_to_db
                save_cve_to_db(all_vulnerabilities)
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_vulnerabilities):,} CVE")
                return True
            else:
                logger.error("‚ùå No vulnerabilities loaded")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error loading CVEs: {e}")
            return False
    
    async def load_initial_cve_data(self):
        """–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CVE –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üì• –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ CVE –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            conn = sqlite3.connect('db/cve.db')
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute("SELECT COUNT(*) FROM cve")
            count = cursor.fetchone()[0]
            
            if count == 0:
                logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É CVE...")
                from bot.services.collector import load_all_cves
                success = await load_all_cves()
                if success:
                    logger.info("‚úÖ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CVE –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CVE –¥–∞–Ω–Ω—ã—Ö")
                    return False
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º EPSS –¥–∞–Ω–Ω—ã–µ
                logger.info("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º EPSS –¥–∞–Ω–Ω—ã–µ...")
                from bot.services.collector import load_epss_data
                epss_success = await load_epss_data()
                if epss_success:
                    logger.info("‚úÖ EPSS –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                else:
                    logger.warning("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å EPSS –¥–∞–Ω–Ω—ã–µ")
            else:
                logger.info(f"üìä –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –µ—Å—Ç—å {count:,} CVE –∑–∞–ø–∏—Å–µ–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ EPSS –¥–∞–Ω–Ω—ã—Ö
                cursor.execute("SELECT COUNT(*) FROM cve WHERE epss IS NOT NULL")
                epss_count = cursor.fetchone()[0]
                
                if epss_count == 0:
                    logger.info("üìä EPSS –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ...")
                    from bot.services.collector import load_epss_data
                    
                    epss_success = await load_epss_data()
                    if epss_success:
                        logger.info("‚úÖ EPSS –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    else:
                        logger.warning("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å EPSS –¥–∞–Ω–Ω—ã–µ")
                else:
                    logger.info(f"üìä EPSS –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è {epss_count:,} CVE")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                cursor.execute("SELECT MAX(published_date) FROM cve")
                last_date = cursor.fetchone()[0]
                if last_date:
                    self.last_update = last_date
                    logger.info(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_date}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π CVE ID
                cursor.execute("SELECT id FROM cve ORDER BY published_date DESC LIMIT 1")
                last_cve = cursor.fetchone()
                if last_cve:
                    self.last_cve_id = last_cve[0]
                    logger.info(f"üÜî –ü–æ—Å–ª–µ–¥–Ω–∏–π CVE: {self.last_cve_id}")
            
            conn.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CVE –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
        
        return True
    
    async def update_cve_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CVE –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CVE –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            from bot.services.collector import load_incremental_cves
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            conn = sqlite3.connect('db/cve.db')
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM cve")
            old_count = cursor.fetchone()[0]
            conn.close()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            success = await load_incremental_cves()
            
            if not success:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CVE –¥–∞–Ω–Ω—ã—Ö")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            conn = sqlite3.connect('db/cve.db')
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM cve")
            new_count = cursor.fetchone()[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π CVE
            cursor.execute("SELECT id, published_date FROM cve ORDER BY published_date DESC LIMIT 1")
            last_cve = cursor.fetchone()
            
            conn.close()
            
            added_count = new_count - old_count
            self.last_update = datetime.now().isoformat()
            
            if last_cve:
                self.last_cve_id = last_cve[0]
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count:,} –Ω–æ–≤—ã—Ö CVE")
                logger.info(f"üÜî –ü–æ—Å–ª–µ–¥–Ω–∏–π CVE: {self.last_cve_id} ({last_cve[1]})")
                logger.info(f"üìä –í—Å–µ–≥–æ CVE –≤ –±–∞–∑–µ: {new_count:,}")
            else:
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count:,} –Ω–æ–≤—ã—Ö CVE")
                logger.info(f"üìä –í—Å–µ–≥–æ CVE –≤ –±–∞–∑–µ: {new_count:,}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º EPSS –¥–∞–Ω–Ω—ã–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
            logger.info("üìä –û–±–Ω–æ–≤–ª—è–µ–º EPSS –¥–∞–Ω–Ω—ã–µ...")
            from bot.services.collector import load_epss_data, should_update_epss
            
            if await should_update_epss():
                epss_success = await load_epss_data()
                if epss_success:
                    logger.info("‚úÖ EPSS –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                else:
                    logger.warning("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å EPSS –¥–∞–Ω–Ω—ã–µ")
            else:
                logger.info("‚è≠Ô∏è  EPSS –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ CVE: {e}")
    
    async def periodic_update(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CVE –∫–∞–∂–¥—ã–π —á–∞—Å"""
        from datetime import datetime
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ {Config.NVD_UPDATE_INTERVAL} —Å–µ–∫—É–Ω–¥")
        while self.running:
            try:
                current_time = datetime.now().strftime("%H:%M:%S")
                logger.info(f"‚è∞ [{current_time}] –û–∂–∏–¥–∞–Ω–∏–µ {Config.NVD_UPDATE_INTERVAL} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
                await asyncio.sleep(Config.NVD_UPDATE_INTERVAL)  # –ñ–¥–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if self.running:
                    current_time = datetime.now().strftime("%H:%M:%S")
                    logger.info(f"üîÑ [{current_time}] –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CVE...")
                    await self.update_cve_data()
                    current_time = datetime.now().strftime("%H:%M:%S")
                    logger.info(f"‚úÖ [{current_time}] –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                else:
                    logger.info("‚èπÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                current_time = datetime.now().strftime("%H:%M:%S")
                logger.error(f"‚ùå [{current_time}] –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
                import traceback
                logger.error(f"Traceback: {traceback.format_exc()}")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        try:
            from bot.main import main as bot_main
            await bot_main()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
    
    async def get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            conn = sqlite3.connect('db/cve.db')
            cursor = conn.cursor()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CVE
            cursor.execute("SELECT COUNT(*) FROM cve")
            total_cve = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö CVE
            cursor.execute("SELECT COUNT(*) FROM cve WHERE cvss_v3 >= 9.0")
            critical_cve = cursor.fetchone()[0]
            
            # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            cursor.execute("SELECT MAX(published_date) FROM cve")
            last_update = cursor.fetchone()[0]
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π CVE
            cursor.execute("SELECT id FROM cve ORDER BY published_date DESC LIMIT 1")
            last_cve = cursor.fetchone()
            
            conn.close()
            
            return {
                'total_cve': total_cve,
                'critical_cve': critical_cve,
                'last_update': last_update,
                'last_cve': last_cve[0] if last_cve else None
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
        self.running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞
        if self.full_load_task and not self.full_load_task.done():
            logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É CVE...")
            self.full_load_task.cancel()
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ CVE Info Bot...")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        log_system_info()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if not await self.check_environment():
                logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
                return
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ CVE –¥–∞–Ω–Ω—ã—Ö
            if not await self.load_initial_cve_data():
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CVE –¥–∞–Ω–Ω—ã—Ö")
                return
            
            self.running = True
            
            # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.update_task = asyncio.create_task(self.periodic_update())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CVE
            needs_full_load = await self.check_cve_statistics()
            
            if needs_full_load:
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –í–°–ï–• CVE...")
                logger.info("üí° –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤, –Ω–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                self.full_load_task = asyncio.create_task(self.full_cve_load_background())
            else:
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–Ω–∞—è, —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞")
                
                # –ï—Å–ª–∏ –ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, –Ω–æ EPSS –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
                conn = sqlite3.connect(Config.DB_PATH)
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM cve WHERE epss IS NOT NULL")
                epss_count = cursor.fetchone()[0]
                conn.close()
                
                if epss_count == 0:
                    logger.info("üìä EPSS –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ...")
                    from bot.services.collector import load_epss_data
                    
                    epss_success = await load_epss_data()
                    if epss_success:
                        logger.info("‚úÖ EPSS –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    else:
                        logger.warning("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å EPSS –¥–∞–Ω–Ω—ã–µ")
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            self.bot_task = asyncio.create_task(self.start_bot())
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            tasks = [self.bot_task, self.update_task]
            if self.full_load_task:
                tasks.append(self.full_load_task)
            
            await asyncio.gather(*tasks, return_exceptions=True)
            
        except KeyboardInterrupt:
            logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.running = False
            if self.update_task:
                self.update_task.cancel()
            if self.bot_task:
                self.bot_task.cancel()
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = BotManager()
    asyncio.run(manager.run())

if __name__ == "__main__":
    main()
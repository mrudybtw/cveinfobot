#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∑–∞–ø—É—Å–∫ CVE Info Bot —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º CVE
"""

import asyncio
import sys
import os
import signal
import logging
from pathlib import Path
from datetime import datetime, timedelta
import sqlite3

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from bot.utils.logging_config import setup_logging, get_logger, log_system_info

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∏ UTC+3
setup_logging()
logger = get_logger(__name__)

class BotManager:
    def __init__(self):
        self.bot_task = None
        self.update_task = None
        self.running = False
        self.last_update = None
        self.last_cve_id = None
        
    async def check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
        if not Path(".env").exists():
            logger.error("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å TELEGRAM_TOKEN")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not Path("db/cve.db").exists():
            logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
            try:
                from db.init_db import init_database
                init_database()
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama
        try:
            import subprocess
            result = subprocess.run(['ollama', '--version'], capture_output=True, text=True, timeout=5)
            if result.returncode != 0:
                logger.warning("‚ö†Ô∏è Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω. AI-–∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except (FileNotFoundError, subprocess.TimeoutExpired):
            logger.warning("‚ö†Ô∏è Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω. AI-–∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
    
    async def load_initial_cve_data(self):
        """–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CVE –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üì• –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ CVE –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            conn = sqlite3.connect('db/cve.db')
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute("SELECT COUNT(*) FROM cve")
            count = cursor.fetchone()[0]
            
            if count == 0:
                logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É CVE...")
                from load_cve_data import main as load_cve_main
                await load_cve_main()
                logger.info("‚úÖ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CVE –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º EPSS –¥–∞–Ω–Ω—ã–µ
                logger.info("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º EPSS –¥–∞–Ω–Ω—ã–µ...")
                from load_epss_data import main as load_epss_main
                load_epss_main()
                logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ EPSS –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            else:
                logger.info(f"üìä –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –µ—Å—Ç—å {count:,} CVE –∑–∞–ø–∏—Å–µ–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ EPSS –¥–∞–Ω–Ω—ã—Ö
                cursor.execute("SELECT COUNT(*) FROM cve WHERE epss IS NOT NULL")
                epss_count = cursor.fetchone()[0]
                
                if epss_count == 0:
                    logger.info("üìä EPSS –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–≥—Ä—É–∂–∞–µ–º...")
                    from load_epss_data import main as load_epss_main
                    load_epss_main()
                    logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ EPSS –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                else:
                    logger.info(f"üìä EPSS –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è {epss_count:,} CVE")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                cursor.execute("SELECT MAX(published_date) FROM cve")
                last_date = cursor.fetchone()[0]
                if last_date:
                    self.last_update = last_date
                    logger.info(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_date}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π CVE ID
                cursor.execute("SELECT id FROM cve ORDER BY published_date DESC LIMIT 1")
                last_cve = cursor.fetchone()
                if last_cve:
                    self.last_cve_id = last_cve[0]
                    logger.info(f"üÜî –ü–æ—Å–ª–µ–¥–Ω–∏–π CVE: {self.last_cve_id}")
            
            conn.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CVE –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
        
        return True
    
    async def update_cve_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CVE –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CVE –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            from load_cve_data import load_cves_incremental
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            conn = sqlite3.connect('db/cve.db')
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM cve")
            old_count = cursor.fetchone()[0]
            conn.close()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            success = await load_cves_incremental()
            
            if not success:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CVE –¥–∞–Ω–Ω—ã—Ö")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            conn = sqlite3.connect('db/cve.db')
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM cve")
            new_count = cursor.fetchone()[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π CVE
            cursor.execute("SELECT id, published_date FROM cve ORDER BY published_date DESC LIMIT 1")
            last_cve = cursor.fetchone()
            
            conn.close()
            
            added_count = new_count - old_count
            self.last_update = datetime.now().isoformat()
            
            if last_cve:
                self.last_cve_id = last_cve[0]
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count:,} –Ω–æ–≤—ã—Ö CVE")
                logger.info(f"üÜî –ü–æ—Å–ª–µ–¥–Ω–∏–π CVE: {self.last_cve_id} ({last_cve[1]})")
            else:
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count:,} –Ω–æ–≤—ã—Ö CVE")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º EPSS –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑ –≤ –¥–µ–Ω—å
            logger.info("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è EPSS –¥–∞–Ω–Ω—ã—Ö...")
            from load_epss_data import main as load_epss_main
            load_epss_main()
            logger.info("‚úÖ EPSS –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ CVE: {e}")
    
    async def periodic_update(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CVE –∫–∞–∂–¥—ã–π —á–∞—Å"""
        while self.running:
            try:
                await asyncio.sleep(3600)  # –ñ–¥–µ–º 1 —á–∞—Å
                if self.running:
                    await self.update_cve_data()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        try:
            from bot.main import main as bot_main
            await bot_main()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
    
    async def get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            conn = sqlite3.connect('db/cve.db')
            cursor = conn.cursor()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CVE
            cursor.execute("SELECT COUNT(*) FROM cve")
            total_cve = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö CVE
            cursor.execute("SELECT COUNT(*) FROM cve WHERE cvss_v3 >= 9.0")
            critical_cve = cursor.fetchone()[0]
            
            # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            cursor.execute("SELECT MAX(published_date) FROM cve")
            last_update = cursor.fetchone()[0]
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π CVE
            cursor.execute("SELECT id FROM cve ORDER BY published_date DESC LIMIT 1")
            last_cve = cursor.fetchone()
            
            conn.close()
            
            return {
                'total_cve': total_cve,
                'critical_cve': critical_cve,
                'last_update': last_update,
                'last_cve': last_cve[0] if last_cve else None
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
        self.running = False
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ CVE Info Bot...")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        log_system_info()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if not await self.check_environment():
                logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
                return
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ CVE –¥–∞–Ω–Ω—ã—Ö
            if not await self.load_initial_cve_data():
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CVE –¥–∞–Ω–Ω—ã—Ö")
                return
            
            self.running = True
            
            # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.update_task = asyncio.create_task(self.periodic_update())
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            self.bot_task = asyncio.create_task(self.start_bot())
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await asyncio.gather(self.bot_task, self.update_task, return_exceptions=True)
            
        except KeyboardInterrupt:
            logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.running = False
            if self.update_task:
                self.update_task.cancel()
            if self.bot_task:
                self.bot_task.cancel()
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = BotManager()
    asyncio.run(manager.run())

if __name__ == "__main__":
    main()
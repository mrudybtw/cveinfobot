import logging
from aiogram import types
from aiogram.filters import Command
from ..services.bot_service import BotService

logger = logging.getLogger(__name__)

class CommandHandler:
    def __init__(self, bot_service: BotService):
        self.bot_service = bot_service
    
    async def handle_cve_command(self, message: types.Message):
        """Handle /cve command"""
        try:
            text = message.text
            if not text:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cve CVE-YYYY-NNNNN", disable_web_page_preview=True)
                return
            
            # Extract CVE ID from command
            cve_patterns = self.bot_service.find_cve_patterns(text)
            if not cve_patterns:
                await message.answer("‚ùå CVE ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: CVE-YYYY-NNNNN", disable_web_page_preview=True)
                return
            
            cve_id = cve_patterns[0]  # Take first CVE found
            cve_data = self.bot_service.get_cve_info(cve_id)
            
            if cve_data:
                # Send initial message with basic info + loading indicator
                initial_message = self.bot_service.format_cve_message(cve_data, include_ai=False)
                loading_message = self.bot_service.format_cve_message(cve_data, include_ai=True, loading_animation="üîÑ <i>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —É—è–∑–≤–∏–º–æ—Å—Ç—å...</i>")
                sent_message = await message.answer(loading_message, parse_mode="HTML", disable_web_page_preview=True)
                
                # Generate AI explanation and edit the message
                try:
                    ai_explanation = await self.bot_service.generate_ai_explanation(cve_data)
                    
                    # Create updated message with AI analysis
                    updated_message = f"{initial_message}\n\nü§ñ <b>AI-–∞–Ω–∞–ª–∏–∑:</b>\n\n{ai_explanation}"
                    
                    # Edit the original message
                    await sent_message.edit_text(updated_message, parse_mode="HTML", disable_web_page_preview=True)
                    
                except Exception as e:
                    logger.error(f"Error generating AI explanation: {e}")
                    # Edit message to show AI error
                    error_message = f"{initial_message}\n\nü§ñ <b>AI-–∞–Ω–∞–ª–∏–∑:</b>\n<i>–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                    await sent_message.edit_text(error_message, parse_mode="HTML", disable_web_page_preview=True)
            else:
                await message.answer(f"‚ùå CVE {cve_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", disable_web_page_preview=True)
                
        except Exception as e:
            logger.error(f"Error handling CVE command: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.", disable_web_page_preview=True)
    
    async def handle_vendor_command(self, message: types.Message):
        """Handle /vendor command"""
        try:
            text = message.text
            if not text:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /vendor <–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ–Ω–¥–æ—Ä–∞/–ø—Ä–æ–¥—É–∫—Ç–∞>", disable_web_page_preview=True)
                return
            
            # Extract vendor/product name
            parts = text.split(maxsplit=1)
            if len(parts) < 2:
                await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ–Ω–¥–æ—Ä–∞/–ø—Ä–æ–¥—É–∫—Ç–∞: /vendor <–Ω–∞–∑–≤–∞–Ω–∏–µ>", disable_web_page_preview=True)
                return
            
            vendor_name = parts[1]
            results = self.bot_service.search_by_vendor(vendor_name, limit=10)
            
            if results:
                response = self.bot_service.format_vendor_search_results(results)
                await message.answer(response, parse_mode="Markdown", disable_web_page_preview=True)
            else:
                await message.answer(f"‚ùå CVE –¥–ª—è '{vendor_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", disable_web_page_preview=True)
                
        except Exception as e:
            logger.error(f"Error handling vendor command: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.", disable_web_page_preview=True)
    
    async def handle_top_command(self, message: types.Message):
        """Handle /top command - show top critical CVEs with interactive buttons"""
        try:
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            results = self.bot_service.get_top_critical_cves(limit=10)
            
            if results:
                response = "üî¥ <b>–¢–æ–ø-5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö CVE:</b>\n\n"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π CVE
                keyboard_buttons = []
                
                for i, cve in enumerate(results[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5
                    cvss = cve.get('cvss_v3', 'N/A')
                    epss = cve.get('epss')
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
                    if cvss and cvss >= 9.0:
                        severity_emoji = "üî¥"
                    elif cvss and cvss >= 7.0:
                        severity_emoji = "üü†"
                    else:
                        severity_emoji = "üü°"
                    
                    # EPSS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∫—Ä–∞—Ç–∫–∞—è)
                    epss_text = ""
                    if epss is not None:
                        if epss > 0.8:
                            epss_emoji = "‚ö†Ô∏è"
                        elif epss > 0.5:
                            epss_emoji = "üö®"
                        elif epss > 0.2:
                            epss_emoji = "üü°"
                        else:
                            epss_emoji = "üü¢"
                        epss_text = f" {epss_emoji}"
                    
                    # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    description = cve.get('description', 'No description')
                    if len(description) > 50:
                        description = description[:50] + "..."
                    
                    vendor = cve.get('vendor', '').strip()
                    product = cve.get('product', '').strip()
                    
                    # –ï—Å–ª–∏ –≤–µ–Ω–¥–æ—Ä/–ø—Ä–æ–¥—É–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                    if not vendor or not product:
                        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ–Ω–¥–æ—Ä–∞/–ø—Ä–æ–¥—É–∫—Ç–∞
                        desc = cve.get('description', '')
                        if 'DOXENSE' in desc:
                            vendor = 'DOXENSE'
                            product = 'WATCHDOC'
                        elif 'HaruTheme' in desc:
                            vendor = 'HaruTheme'
                            product = 'WooCommerce Designer Pro'
                        elif 'TalentSys' in desc:
                            vendor = 'TalentSys'
                            product = 'Consulting Information Technology'
                        elif 'flowiseai' in desc or 'Flowise' in desc:
                            vendor = 'flowiseai'
                            product = 'flowise'
                        elif 'Delta Electronics' in desc:
                            vendor = 'Delta Electronics'
                            product = 'DIALink'
                        elif 'Spring Cloud' in desc:
                            vendor = 'Spring'
                            product = 'Cloud Gateway'
                        elif 'Digiever' in desc:
                            vendor = 'Digiever'
                            product = 'NVR'
                        else:
                            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–∏–º–æ–µ —Å–ª–æ–≤–æ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–∫ –≤–µ–Ω–¥–æ—Ä
                            words = desc.split()
                            if words:
                                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
                                skip_words = ['A', 'An', 'The', 'In', 'Unrestricted', 'Improper', 'Certain', 'Directory', 'Authorization']
                                for word in words:
                                    if word not in skip_words and len(word) > 2:
                                        vendor = word
                                        product = 'Unknown'
                                        break
                    
                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º Unknown
                    if not vendor:
                        vendor = 'Unknown'
                    if not product:
                        product = 'Unknown'
                    
                    # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –≤–µ–Ω–¥–æ—Ä–æ–º/–ø—Ä–æ–¥—É–∫—Ç–æ–º
                    response += f"{i}. {severity_emoji} <b>{cve['id']}</b> (CVSS: {cvss}){epss_text}\n"
                    response += f"   <i>{vendor} {product}</i>\n"
                    response += f"   {description}\n\n"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–ø–æ 2 –≤ —Ä—è–¥—É)
                for i in range(1, 6):
                    if i % 2 == 1:  # –ù–µ—á–µ—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ - –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∞
                        if i == 5:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ - –æ—Ç–¥–µ–ª—å–Ω–æ
                            keyboard_buttons.append([
                                InlineKeyboardButton(
                                    text=f"{i}",
                                    callback_data=f"cve_detail_{results[i-1]['id']}"
                                )
                            ])
                        else:  # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
                            keyboard_buttons.append([
                                InlineKeyboardButton(
                                    text=f"{i}",
                                    callback_data=f"cve_detail_{results[i-1]['id']}"
                                ),
                                InlineKeyboardButton(
                                    text=f"{i+1}",
                                    callback_data=f"cve_detail_{results[i]['id']}"
                                )
                            ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ CVE
                if len(results) > 5:
                    keyboard_buttons.append([
                        InlineKeyboardButton(
                            text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ 5 CVE",
                            callback_data="top_more"
                        )
                    ])
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
                
                await message.answer(
                    response, 
                    parse_mode="HTML", 
                    disable_web_page_preview=True,
                    reply_markup=keyboard
                )
            else:
                await message.answer("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ CVE –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", disable_web_page_preview=True)
                
        except Exception as e:
            logger.error(f"Error handling top command: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.", disable_web_page_preview=True)
    
    async def handle_start_command(self, message: types.Message):
        """Handle /start command"""
        # Check if start parameter contains CVE ID
        if message.text and 'cve_' in message.text:
            try:
                cve_id = message.text.split('cve_')[1].split()[0]
                # Get CVE data and send directly
                cve_data = self.bot_service.get_cve_info(cve_id)
                if cve_data:
                    # Send initial message with basic info + loading indicator
                    initial_message = self.bot_service.format_cve_message(cve_data, include_ai=False)
                    loading_message = self.bot_service.format_cve_message(cve_data, include_ai=True, loading_animation="üîÑ <i>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —É—è–∑–≤–∏–º–æ—Å—Ç—å...</i>")
                    sent_message = await message.answer(loading_message, parse_mode="HTML", disable_web_page_preview=True)
                    
                    # Generate AI explanation and edit the message
                    try:
                        ai_explanation = await self.bot_service.generate_ai_explanation(cve_data)
                        
                        # Create updated message with AI analysis
                        updated_message = f"{initial_message}\n\nü§ñ <b>AI-–∞–Ω–∞–ª–∏–∑:</b>\n\n{ai_explanation}"
                        
                        # Edit the original message
                        await sent_message.edit_text(updated_message, parse_mode="HTML", disable_web_page_preview=True)
                        
                    except Exception as e:
                        logger.error(f"Error generating AI explanation: {e}")
                        # Edit message to show AI error
                        error_message = f"{initial_message}\n\nü§ñ <b>AI-–∞–Ω–∞–ª–∏–∑:</b>\n<i>–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                        await sent_message.edit_text(error_message, parse_mode="HTML", disable_web_page_preview=True)
                else:
                    await message.answer(f"‚ùå CVE {cve_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", disable_web_page_preview=True)
                return
            except Exception as e:
                logger.error(f"Error processing start parameter: {e}")
                pass
        
        welcome_text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CVE Info Bot!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö CVE —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º –∏ EPSS –æ—Ü–µ–Ω–∫–∞–º–∏.

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/cve CVE-YYYY-NNNNN` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π CVE
‚Ä¢ `/vendor <–Ω–∞–∑–≤–∞–Ω–∏–µ>` - –ü–æ–∏—Å–∫ CVE –ø–æ –≤–µ–Ω–¥–æ—Ä—É/–ø—Ä–æ–¥—É–∫—Ç—É
‚Ä¢ `/top` - –¢–æ–ø-5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö CVE —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ `/help` - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ CVE
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @cveinfobot –¥–ª—è inline-–ø–æ–∏—Å–∫–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CVE –∫–∞–∂–¥—ã–π —á–∞—Å

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/cve CVE-2023-1234`
‚Ä¢ `/vendor microsoft`
‚Ä¢ `/vendor apache`
‚Ä¢ `/stats`

**AI-–∞–Ω–∞–ª–∏–∑:**
–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å Ollama –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ CVE.

**EPSS –æ—Ü–µ–Ω–∫–∏:**
–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç EPSS (Exploit Prediction Scoring System) –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞—Ç–∞–∫–∞—Ö.

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã `/help` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!
        """
        await message.answer(welcome_text, parse_mode="Markdown", disable_web_page_preview=True)

    async def handle_stats_command(self, message: types.Message):
        """Handle /stats command - show database statistics"""
        try:
            import sqlite3
            from datetime import datetime
            
            conn = sqlite3.connect('db/cve.db')
            cursor = conn.cursor()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CVE
            cursor.execute("SELECT COUNT(*) FROM cve")
            total_cve = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö CVE
            cursor.execute("SELECT COUNT(*) FROM cve WHERE cvss_v3 IS NOT NULL AND cvss_v3 >= 9.0")
            critical_cve = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Å–æ–∫–∏—Ö CVE
            cursor.execute("SELECT COUNT(*) FROM cve WHERE cvss_v3 IS NOT NULL AND cvss_v3 >= 7.0 AND cvss_v3 < 9.0")
            high_cve = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥–Ω–∏—Ö CVE
            cursor.execute("SELECT COUNT(*) FROM cve WHERE cvss_v3 IS NOT NULL AND cvss_v3 >= 4.0 AND cvss_v3 < 7.0")
            medium_cve = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏–∑–∫–∏—Ö CVE
            cursor.execute("SELECT COUNT(*) FROM cve WHERE cvss_v3 IS NOT NULL AND cvss_v3 < 4.0")
            low_cve = cursor.fetchone()[0]
            
            # CVE –±–µ–∑ CVSS –æ—Ü–µ–Ω–∫–∏
            cursor.execute("SELECT COUNT(*) FROM cve WHERE cvss_v3 IS NULL")
            no_cvss = cursor.fetchone()[0]
            
            # EPSS —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute("SELECT COUNT(*) FROM cve WHERE epss IS NOT NULL")
            with_epss = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM cve WHERE epss > 0.5")
            high_epss = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM cve WHERE epss > 0.8")
            very_high_epss = cursor.fetchone()[0]
            
            cursor.execute("SELECT AVG(epss) FROM cve WHERE epss IS NOT NULL")
            avg_epss = cursor.fetchone()[0]
            
            # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            cursor.execute("SELECT MAX(published_date) FROM cve")
            last_update = cursor.fetchone()[0]
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π CVE (–ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)
            cursor.execute("SELECT id, published_date FROM cve ORDER BY published_date DESC LIMIT 1")
            last_cve = cursor.fetchone()
            
            # –°–∞–º—ã–π –Ω–æ–≤—ã–π CVE ID (–ø–æ –Ω–æ–º–µ—Ä—É)
            cursor.execute("SELECT id FROM cve ORDER BY CAST(SUBSTR(id, 5, 4) AS INTEGER) DESC, CAST(SUBSTR(id, 10) AS INTEGER) DESC LIMIT 1")
            newest_cve = cursor.fetchone()
            
            # CVE –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            cursor.execute("SELECT COUNT(*) FROM cve WHERE published_date >= datetime('now', '-1 day')")
            last_24h = cursor.fetchone()[0]
            
            # CVE –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
            cursor.execute("SELECT COUNT(*) FROM cve WHERE published_date >= datetime('now', '-7 days')")
            last_week = cursor.fetchone()[0]
            
            conn.close()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if last_update:
                try:
                    last_update_dt = datetime.fromisoformat(last_update.replace('Z', '+00:00'))
                    last_update_str = last_update_dt.strftime('%d.%m.%Y %H:%M UTC')
                except:
                    last_update_str = last_update
            else:
                last_update_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥–Ω–∏–π EPSS
            avg_epss_str = f"{avg_epss:.4f}" if avg_epss is not None else "N/A"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö CVE**

**–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ CVE: {total_cve:,}
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö (9.0+): {critical_cve:,} üî¥
‚Ä¢ –í—ã—Å–æ–∫–∏—Ö (7.0-8.9): {high_cve:,} üü†
‚Ä¢ –°—Ä–µ–¥–Ω–∏—Ö (4.0-6.9): {medium_cve:,} üü°
‚Ä¢ –ù–∏–∑–∫–∏—Ö (<4.0): {low_cve:,} üü¢
‚Ä¢ –ë–µ–∑ CVSS: {no_cvss:,} ‚ö™

**EPSS (Exploit Prediction):**
‚Ä¢ –° EPSS: {with_epss:,} ({with_epss/total_cve*100:.1f}%)
‚Ä¢ –í—ã—Å–æ–∫–∏–π EPSS (>0.5): {high_epss:,} üö®
‚Ä¢ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π EPSS (>0.8): {very_high_epss:,} ‚ö†Ô∏è
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π EPSS: {avg_epss_str}

**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:**
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update_str}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π CVE (–ø–æ –¥–∞—Ç–µ): {last_cve[0] if last_cve else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚Ä¢ –°–∞–º—ã–π –Ω–æ–≤—ã–π CVE ID: {newest_cve[0] if newest_cve else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {last_24h:,} –Ω–æ–≤—ã—Ö CVE
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {last_week:,} –Ω–æ–≤—ã—Ö CVE
            """
            
            await message.answer(stats_text, parse_mode="Markdown", disable_web_page_preview=True)
            
        except Exception as e:
            logger.error(f"Error handling stats command: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", disable_web_page_preview=True)
    
    async def handle_help_command(self, message: types.Message):
        """Handle /help command"""
        help_text = """
ü§ñ **CVE Info Bot - –°–ø—Ä–∞–≤–∫–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/cve CVE-YYYY-NNNNN` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π CVE
‚Ä¢ `/vendor <–Ω–∞–∑–≤–∞–Ω–∏–µ>` - –ü–æ–∏—Å–∫ CVE –ø–æ –≤–µ–Ω–¥–æ—Ä—É/–ø—Ä–æ–¥—É–∫—Ç—É
‚Ä¢ `/top` - –¢–æ–ø-5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö CVE —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ CVE
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @cveinfobot –¥–ª—è inline-–ø–æ–∏—Å–∫–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CVE –∫–∞–∂–¥—ã–π —á–∞—Å
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ CVE

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/cve CVE-2023-1234`
‚Ä¢ `/vendor microsoft`
‚Ä¢ `/vendor apache`
‚Ä¢ `/stats`

**AI-–∞–Ω–∞–ª–∏–∑:**
–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å Ollama –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ CVE.

**EPSS –æ—Ü–µ–Ω–∫–∏:**
–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç EPSS (Exploit Prediction Scoring System) –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞—Ç–∞–∫–∞—Ö.
        """
        await message.answer(help_text, parse_mode="Markdown", disable_web_page_preview=True)

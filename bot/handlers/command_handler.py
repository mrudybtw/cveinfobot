import logging
from aiogram import types
from aiogram.filters import Command
from ..services.bot_service import BotService

logger = logging.getLogger(__name__)

class CommandHandler:
    def __init__(self, bot_service: BotService):
        self.bot_service = bot_service
    
    async def handle_cve_command(self, message: types.Message):
        """Handle /cve command"""
        try:
            text = message.text
            if not text:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cve CVE-YYYY-NNNNN")
                return
            
            # Extract CVE ID from command
            cve_patterns = self.bot_service.find_cve_patterns(text)
            if not cve_patterns:
                await message.answer("‚ùå CVE ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: CVE-YYYY-NNNNN")
                return
            
            cve_id = cve_patterns[0]  # Take first CVE found
            cve_data = self.bot_service.get_cve_info(cve_id)
            
            if cve_data:
                # Send initial message with basic info + loading indicator
                initial_message = self.bot_service.format_cve_message(cve_data, include_ai=False)
                loading_message = self.bot_service.format_cve_message(cve_data, include_ai=True, loading_animation="üîÑ <i>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —É—è–∑–≤–∏–º–æ—Å—Ç—å...</i>")
                sent_message = await message.answer(loading_message, parse_mode="HTML")
                
                # Generate AI explanation and edit the message
                try:
                    ai_explanation = await self.bot_service.generate_ai_explanation(cve_data)
                    
                    # Create updated message with AI analysis
                    updated_message = f"{initial_message}\n\nü§ñ <b>AI-–∞–Ω–∞–ª–∏–∑:</b>\n\n{ai_explanation}"
                    
                    # Edit the original message
                    await sent_message.edit_text(updated_message, parse_mode="HTML")
                    
                except Exception as e:
                    logger.error(f"Error generating AI explanation: {e}")
                    # Edit message to show AI error
                    error_message = f"{initial_message}\n\nü§ñ <b>AI-–∞–Ω–∞–ª–∏–∑:</b>\n<i>–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"
                    await sent_message.edit_text(error_message, parse_mode="HTML")
            else:
                await message.answer(f"‚ùå CVE {cve_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                
        except Exception as e:
            logger.error(f"Error handling CVE command: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")
    
    async def handle_vendor_command(self, message: types.Message):
        """Handle /vendor command"""
        try:
            text = message.text
            if not text:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /vendor <–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ–Ω–¥–æ—Ä–∞/–ø—Ä–æ–¥—É–∫—Ç–∞>")
                return
            
            # Extract vendor/product name
            parts = text.split(maxsplit=1)
            if len(parts) < 2:
                await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ–Ω–¥–æ—Ä–∞/–ø—Ä–æ–¥—É–∫—Ç–∞: /vendor <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
                return
            
            vendor_name = parts[1]
            results = self.bot_service.search_by_vendor(vendor_name, limit=10)
            
            if results:
                response = self.bot_service.format_vendor_search_results(results)
                await message.answer(response, parse_mode="Markdown")
            else:
                await message.answer(f"‚ùå CVE –¥–ª—è '{vendor_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                
        except Exception as e:
            logger.error(f"Error handling vendor command: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")
    
    async def handle_top_command(self, message: types.Message):
        """Handle /top command - show top critical CVEs"""
        try:
            results = self.bot_service.get_top_critical_cves(limit=5)
            
            if results:
                response = "üî¥ *–¢–æ–ø\\-5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö CVE:*\n\n"
                for i, cve in enumerate(results, 1):
                    cvss = cve.get('cvss_v3', 'N/A')
                    severity_emoji = "üî¥" if cvss and cvss >= 9.0 else "üü†" if cvss and cvss >= 7.0 else "üü°"
                    
                    # Escape special characters
                    cve_id = cve['id'].replace('_', '\\_').replace('*', '\\*')
                    vendor = cve.get('vendor', 'Unknown').replace('_', '\\_').replace('*', '\\*')
                    product = cve.get('product', 'Unknown').replace('_', '\\_').replace('*', '\\*')
                    description = cve.get('description', 'No description')[:100].replace('_', '\\_').replace('*', '\\*')
                    
                    response += f"{i}\\. {severity_emoji} *{cve_id}* \\(CVSS: {cvss}\\)\n"
                    response += f"   {vendor} {product}\n"
                    response += f"   {description}\\.\\.\\.\n\n"
                
                await message.answer(response, parse_mode="Markdown")
            else:
                await message.answer("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ CVE –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\\.")
                
        except Exception as e:
            logger.error(f"Error handling top command: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã\\.")
    
    async def handle_start_command(self, message: types.Message):
        """Handle /start command"""
        welcome_text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CVE Info Bot!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö CVE —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º.

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/cve CVE-YYYY-NNNNN` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π CVE
‚Ä¢ `/vendor <–Ω–∞–∑–≤–∞–Ω–∏–µ>` - –ü–æ–∏—Å–∫ CVE –ø–æ –≤–µ–Ω–¥–æ—Ä—É/–ø—Ä–æ–¥—É–∫—Ç—É
‚Ä¢ `/top` - –¢–æ–ø-5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö CVE
‚Ä¢ `/help` - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ CVE
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @cveinfobot –¥–ª—è inline-–ø–æ–∏—Å–∫–∞

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/cve CVE-2023-1234`
‚Ä¢ `/vendor microsoft`
‚Ä¢ `/vendor apache`

**AI-–∞–Ω–∞–ª–∏–∑:**
–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å Ollama –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ CVE.

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã `/help` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!
        """
        await message.answer(welcome_text, parse_mode="Markdown")

    async def handle_help_command(self, message: types.Message):
        """Handle /help command"""
        help_text = """
ü§ñ **CVE Info Bot - –°–ø—Ä–∞–≤–∫–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/cve CVE-YYYY-NNNNN` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π CVE
‚Ä¢ `/vendor <–Ω–∞–∑–≤–∞–Ω–∏–µ>` - –ü–æ–∏—Å–∫ CVE –ø–æ –≤–µ–Ω–¥–æ—Ä—É/–ø—Ä–æ–¥—É–∫—Ç—É
‚Ä¢ `/top` - –¢–æ–ø-5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö CVE
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ CVE
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @cveinfobot –¥–ª—è inline-–ø–æ–∏—Å–∫–∞

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/cve CVE-2023-1234`
‚Ä¢ `/vendor microsoft`
‚Ä¢ `/vendor apache`

**AI-–∞–Ω–∞–ª–∏–∑:**
–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å Ollama –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ CVE.
        """
        await message.answer(help_text, parse_mode="Markdown")

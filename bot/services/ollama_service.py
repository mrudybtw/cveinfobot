import aiohttp
import json
import logging
from typing import Optional

logger = logging.getLogger(__name__)

class OllamaService:
    def __init__(self, base_url: str = "http://localhost:11434"):
        self.base_url = base_url
        self.model = "llama3.1:8b"  # Default model, can be configured
    
    async def generate_cve_explanation(self, cve_data: dict) -> str:
        """Generate AI explanation and recommendations for a CVE"""
        try:
            prompt = self._create_cve_prompt(cve_data)
            response = await self._call_ollama(prompt)
            return response
        except Exception as e:
            logger.error(f"Error generating CVE explanation: {e}")
            return self._get_fallback_explanation(cve_data)
    
    def _create_cve_prompt(self, cve_data: dict) -> str:
        """Create a prompt for the LLM based on CVE data"""
        cve_id = cve_data.get('id', 'Unknown')
        description = cve_data.get('description', 'No description available')
        cvss_v3 = cve_data.get('cvss_v3', 'N/A')
        vendor = cve_data.get('vendor', 'Unknown')
        product = cve_data.get('product', 'Unknown')
        
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π CVE –∏ –¥–∞–π –ö–†–ê–¢–ö–ò–ô –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–º–∞–∫—Å–∏–º—É–º 150 —Å–ª–æ–≤):

CVE: {cve_id}
–û–ø–∏—Å–∞–Ω–∏–µ: {description}
CVSS: {cvss_v3}
–ü—Ä–æ–¥—É–∫—Ç: {vendor} {product}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–ë–ï–ó –∑–≤–µ–∑–¥–æ—á–µ–∫ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π):
üîç –°—É—Ç—å: [–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
‚ö†Ô∏è –†–∏—Å–∫–∏: [–æ—Å–Ω–æ–≤–Ω—ã–µ —É–≥—Ä–æ–∑—ã]
üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è: [—á—Ç–æ –¥–µ–ª–∞—Ç—å - –æ–±–Ω–æ–≤–∏—Ç—å/–ø–∞—Ç—á–∏—Ç—å/–º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å]
‚è∞ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: [–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π/–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π]

–ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –ø–æ –¥–µ–ª—É! –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π Markdown —Ä–∞–∑–º–µ—Ç–∫—É!
"""
        return prompt
    
    async def _call_ollama(self, prompt: str) -> str:
        """Make API call to Ollama"""
        url = f"{self.base_url}/api/generate"
        payload = {
            "model": self.model,
            "prompt": prompt,
            "stream": False,
            "options": {
                "temperature": 0.3,  # –ë–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                "top_p": 0.8,
                "max_tokens": 200,   # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
                "num_predict": 200   # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            }
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    return result.get('response', '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞')
                else:
                    raise Exception(f"Ollama API error: {response.status}")
    
    def _get_fallback_explanation(self, cve_data: dict) -> str:
        """Fallback explanation when Ollama is not available"""
        cve_id = cve_data.get('id', 'Unknown')
        cvss_v3 = cve_data.get('cvss_v3', 'N/A')
        vendor = cve_data.get('vendor', 'Unknown')
        product = cve_data.get('product', 'Unknown')
        
        # Determine severity based on CVSS score
        if cvss_v3 and isinstance(cvss_v3, (int, float)):
            if cvss_v3 >= 9.0:
                severity = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
                priority = "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ"
            elif cvss_v3 >= 7.0:
                severity = "–í–´–°–û–ö–ò–ô"
                priority = "–í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"
            elif cvss_v3 >= 4.0:
                severity = "–°–†–ï–î–ù–ò–ô"
                priority = "–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏"
            else:
                severity = "–ù–ò–ó–ö–ò–ô"
                priority = "–ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–ª–∞–Ω–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"
        else:
            severity = "–ù–ï–ò–ó–í–ï–°–¢–ù–û"
            priority = "–¢—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"
        
        return f"""
üîç **{cve_id}** - {severity}

**–ü—Ä–æ–¥—É–∫—Ç:** {vendor} {product}
**CVSS v3:** {cvss_v3}

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {priority}
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –ø–∞—Ç—á–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏

‚ö†Ô∏è *AI-–∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.*
"""

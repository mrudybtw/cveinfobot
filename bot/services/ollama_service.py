import aiohttp
import json
import logging
from typing import Optional

logger = logging.getLogger(__name__)

class OllamaService:
    def __init__(self, base_url: str = "http://localhost:11434", model: str = None):
        self.base_url = base_url
        if model is None:
            from config import Config
            self.model = Config.OLLAMA_MODEL
        else:
            self.model = model
    
    async def generate_cve_explanation(self, cve_data: dict) -> str:
        """Generate AI explanation and recommendations for a CVE"""
        try:
            prompt = self._create_cve_prompt(cve_data)
            response = await self._call_ollama(prompt)
            return response
        except Exception as e:
            logger.error(f"Error generating CVE explanation: {e}")
            return self._get_fallback_explanation(cve_data)
    
    def _create_cve_prompt(self, cve_data: dict) -> str:
        """Create a prompt for the LLM based on CVE data"""
        cve_id = cve_data.get('id', 'Unknown')
        description = cve_data.get('description', 'No description available')
        cvss_v3 = cve_data.get('cvss_v3', 'N/A')
        vendor = cve_data.get('vendor', 'Unknown')
        product = cve_data.get('product', 'Unknown')
        
        prompt = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π CVE –∏ –¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

CVE: {cve_id}
–û–ø–∏—Å–∞–Ω–∏–µ: {description}
CVSS: {cvss_v3}
–ü—Ä–æ–¥—É–∫—Ç: {vendor} {product}

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–ª–µ–¥—É–π —ç—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏):

üîç –°—É—Ç—å:
[–û–±—ä—è—Å–Ω–∏ —á—Ç–æ —ç—Ç–æ –∑–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö]

‚ö†Ô∏è –†–∏—Å–∫–∏:
[–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —É–≥—Ä–æ–∑—ã –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è]

üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è:
[–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏: –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ –≤–µ—Ä—Å–∏–∏ X, –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á, –æ—Ç–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∏ —Ç.–¥.]

‚è∞ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
[–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π/–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π]

–í–ê–ñ–ù–û:
- –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º
- –£–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å
- –î–∞–π —á–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π HTML —Ç–µ–≥–∏ (<b>, <i>, <br>, <p> –∏ —Ç.–¥.)
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π Markdown —Ä–∞–∑–º–µ—Ç–∫—É (–∑–≤–µ–∑–¥–æ—á–∫–∏, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏
- –ú–∞–∫—Å–∏–º—É–º 200 —Å–ª–æ–≤
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!"
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤–ª—è–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
"""
        return prompt
    
    async def _call_ollama(self, prompt: str) -> str:
        """Make API call to Ollama"""
        url = f"{self.base_url}/api/generate"
        payload = {
            "model": self.model,
            "prompt": prompt,
            "stream": False,
            "options": {
                "temperature": 0.1,  # –û—á–µ–Ω—å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                "top_p": 0.9,
                "top_k": 40,
                "repeat_penalty": 1.1,
                "max_tokens": 300,   # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                "num_predict": 300,
                "stop": ["\n\n\n", "---", "==="]  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è—Ö
            }
        }
        
        timeout = aiohttp.ClientTimeout(total=30)  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    return result.get('response', '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞')
                else:
                    raise Exception(f"Ollama API error: {response.status}")
    
    def _get_fallback_explanation(self, cve_data: dict) -> str:
        """Fallback explanation when Ollama is not available"""
        cve_id = cve_data.get('id', 'Unknown')
        cvss_v3 = cve_data.get('cvss_v3', 'N/A')
        vendor = cve_data.get('vendor', 'Unknown')
        product = cve_data.get('product', 'Unknown')
        
        # Determine severity based on CVSS score
        if cvss_v3 and isinstance(cvss_v3, (int, float)):
            if cvss_v3 >= 9.0:
                severity = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
                priority = "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ"
            elif cvss_v3 >= 7.0:
                severity = "–í–´–°–û–ö–ò–ô"
                priority = "–í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"
            elif cvss_v3 >= 4.0:
                severity = "–°–†–ï–î–ù–ò–ô"
                priority = "–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏"
            else:
                severity = "–ù–ò–ó–ö–ò–ô"
                priority = "–ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–ª–∞–Ω–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"
        else:
            severity = "–ù–ï–ò–ó–í–ï–°–¢–ù–û"
            priority = "–¢—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"
        
        return f"""üîç –°—É—Ç—å: –£—è–∑–≤–∏–º–æ—Å—Ç—å {cve_id} –≤ –ø—Ä–æ–¥—É–∫—Ç–µ {vendor} {product} —Å –æ—Ü–µ–Ω–∫–æ–π CVSS {cvss_v3}

‚ö†Ô∏è –†–∏—Å–∫–∏: {severity} —É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã. –¢—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã.

üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è: {priority}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –ø–∞—Ç—á–∏. –û—Ç–∫–ª—é—á–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ.

‚è∞ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {severity.lower()}"""

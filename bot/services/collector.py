import asyncio
import aiohttp
import sqlite3
import os
from datetime import datetime
from config import Config

DB_PATH = Config.DB_PATH
NVD_API_URL = Config.NVD_API_URL
NVD_API_KEY = Config.get_nvd_api_key()  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π API –∫–ª—é—á –¥–ª—è NVD
EPSS_API_URL = Config.EPSS_API_URL

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–æ–π
if NVD_API_KEY and NVD_API_KEY.startswith('your_'):
    NVD_API_KEY = ""  # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á

async def fetch_cve(start_index=0, results_per_page=2000, max_retries=3):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç CVE —Å —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limiting
    """
    params = {
        "startIndex": start_index,
        "resultsPerPage": results_per_page
    }
    
    headers = {}
    if NVD_API_KEY:
        headers["apiKey"] = NVD_API_KEY
    
    for attempt in range(max_retries):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(NVD_API_URL, params=params, headers=headers) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        return data
                    elif resp.status == 429:  # Rate limited
                        if attempt < max_retries - 1:
                            wait_time = (2 ** attempt) * 5  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 5, 10, 20 —Å–µ–∫—É–Ω–¥
                            print(f"  ‚è≥ Rate limited, –∂–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥... (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
                            await asyncio.sleep(wait_time)
                            continue
                        else:
                            error_text = await resp.text()
                            raise Exception(f"HTTP {resp.status}: Rate limited after {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                    else:
                        error_text = await resp.text()
                        raise Exception(f"HTTP {resp.status}: {error_text}")
        except Exception as e:
            if attempt < max_retries - 1:
                wait_time = (2 ** attempt) * 2  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
                print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞: {e}, –∂–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥... (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
                await asyncio.sleep(wait_time)
                continue
            else:
                raise e
    
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")

def save_cve_to_db(cve_list):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS cve (
            id TEXT PRIMARY KEY,
            description TEXT,
            cvss_v3 REAL,
            published_date TEXT,
            last_modified TEXT,
            vendor TEXT,
            product TEXT,
            epss REAL
        )
    """)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    c.execute("""
        CREATE TABLE IF NOT EXISTS db_metadata (
            key TEXT PRIMARY KEY,
            value TEXT
        )
    """)
    for item in cve_list:
        cve_id = item['cve']['id']
        published = item['cve']['published']
        last_modified = item['cve']['lastModified']
        desc = item['cve']['descriptions'][0]['value'] if item['cve']['descriptions'] else ''
        
        # Extract CVSS v3 score
        cvss_v3 = None
        metrics = item['cve'].get('metrics', {})
        if 'cvssMetricV31' in metrics and metrics['cvssMetricV31']:
            cvss_v3 = float(metrics['cvssMetricV31'][0]['cvssData']['baseScore'])
        
        # Extract vendor and product from configurations
        vendor = ""
        product = ""
        if 'configurations' in item['cve'] and item['cve']['configurations']:
            for config in item['cve']['configurations']:
                if 'nodes' in config:
                    for node in config['nodes']:
                        if 'cpeMatch' in node:
                            for cpe in node['cpeMatch']:
                                if 'criteria' in cpe:
                                    cpe_parts = cpe['criteria'].split(':')
                                    if len(cpe_parts) >= 5:
                                        vendor = cpe_parts[3]
                                        product = cpe_parts[4]
                                        break
                            if vendor and product:
                                break
                    if vendor and product:
                        break
        
        c.execute("""
            INSERT OR REPLACE INTO cve (id, description, cvss_v3, published_date, last_modified, vendor, product, epss)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (cve_id, desc, cvss_v3, published, last_modified, vendor, product, None))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    current_time = datetime.utcnow().isoformat() + 'Z'
    c.execute("""
        INSERT OR REPLACE INTO db_metadata (key, value) 
        VALUES ('last_db_update', ?)
    """, (current_time,))
    
    conn.commit()
    conn.close()

def get_last_update_time():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT value FROM db_metadata WHERE key = 'last_db_update'")
        result = cursor.fetchone()
        
        if result and result[0]:
            conn.close()
            return result[0]
        
        # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º MAX(last_modified) –∏–∑ CVE
        cursor.execute("SELECT MAX(last_modified) FROM cve")
        result = cursor.fetchone()
        conn.close()
        return result[0] if result and result[0] else None
    except:
        return None

def is_database_empty():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—É—Å—Ç–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM cve")
        count = cursor.fetchone()[0]
        conn.close()
        return count == 0
    except:
        return True

async def load_all_cves():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å CVE —Å —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limiting"""
    print(f"[{datetime.utcnow().isoformat()}] Starting CVE database load...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CVE
        initial_data = await fetch_cve(start_index=0, results_per_page=1)
        total_results = initial_data.get('totalResults', 0)
        print(f"Total CVEs available: {total_results}")
        
        if total_results == 0:
            print("No CVEs found in NVD")
            return False
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50,000 CVE –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        max_cves = min(total_results, 50000)
        page_size = 1000  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        total_pages = (max_cves + page_size - 1) // page_size
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ CVE
        start_index = max(0, total_results - max_cves)
        
        print(f"Loading last {max_cves} CVEs (from index {start_index}) in {total_pages} pages...")
        print("üí° This is a subset to avoid rate limiting. The bot will update automatically.")
        
        all_vulnerabilities = []
        
        for page in range(total_pages):
            current_start_index = start_index + page * page_size
            current_page_size = min(page_size, max_cves - page * page_size)
            
            print(f"Loading page {page + 1}/{total_pages} (CVE {current_start_index + 1}-{current_start_index + current_page_size})")
            
            try:
                data = await fetch_cve(start_index=current_start_index, results_per_page=current_page_size)
                vulnerabilities = data.get('vulnerabilities', [])
                
                if vulnerabilities:
                    all_vulnerabilities.extend(vulnerabilities)
                    print(f"  ‚úÖ Loaded {len(vulnerabilities)} CVEs from this page")
                else:
                    print(f"  ‚ö†Ô∏è  No CVEs found on page {page + 1}")
                    break
                    
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
                if page < total_pages - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    wait_time = 2.0  # 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    print(f"  ‚è≥ Waiting {wait_time} seconds...")
                    await asyncio.sleep(wait_time)
                
            except Exception as e:
                print(f"  ‚ùå Error loading page {page + 1}: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                if page < total_pages - 1:
                    print(f"  ‚è≥ Waiting 10 seconds before next page...")
                    await asyncio.sleep(10)
                continue
        
        if all_vulnerabilities:
            print(f"\nüíæ Saving {len(all_vulnerabilities)} CVEs to database...")
            save_cve_to_db(all_vulnerabilities)
            print(f"[{datetime.utcnow().isoformat()}] ‚úÖ CVE database loaded successfully. Loaded {len(all_vulnerabilities)} CVEs.")
            print(f"üí° Note: This is a subset of all available CVEs to avoid rate limiting.")
            print(f"üí° The bot will automatically update with newer CVEs every hour.")
            return True
        else:
            print("‚ùå No vulnerabilities loaded")
            return False
            
    except Exception as e:
        print(f"‚ùå Error loading CVEs: {e}")
        return False

async def load_incremental_cves():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ CVE (–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ) —Å —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limiting"""
    print(f"[{datetime.utcnow().isoformat()}] Starting INCREMENTAL CVE update...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        if is_database_empty():
            print("‚ùå Database is empty! Please run 'python3 load_cve_data.py' first to load initial data.")
            return False
        
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10,000 CVE
        # –≠—Ç–æ –ø–æ–∫—Ä–æ–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ CVE –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
        print("üîÑ Loading recent CVEs for update...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CVE
        initial_data = await fetch_cve(start_index=0, results_per_page=1)
        total_results = initial_data.get('totalResults', 0)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10,000 CVE
        load_limit = min(10000, total_results)
        start_index = max(0, total_results - load_limit)
        
        print(f"Loading last {load_limit} CVEs (from index {start_index} to {total_results})")
        
        all_vulnerabilities = []
        page_size = 2000
        current_index = start_index
        
        while current_index < total_results:
            remaining = total_results - current_index
            current_page_size = min(page_size, remaining)
            
            try:
                data = await fetch_cve(start_index=current_index, results_per_page=current_page_size)
                vulnerabilities = data.get('vulnerabilities', [])
                
                if vulnerabilities:
                    all_vulnerabilities.extend(vulnerabilities)
                    print(f"  ‚úÖ Loaded {len(vulnerabilities)} CVEs")
                else:
                    break
                    
                current_index += current_page_size
                await asyncio.sleep(0.6)
                
            except Exception as e:
                print(f"  ‚ùå Error: {e}")
                break
        
        if all_vulnerabilities:
            print(f"üíæ Updating database with {len(all_vulnerabilities)} CVEs...")
            save_cve_to_db(all_vulnerabilities)  # INSERT OR REPLACE –æ–±–Ω–æ–≤–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
            print(f"‚úÖ Update completed. Processed {len(all_vulnerabilities)} CVEs.")
        else:
            print("‚úÖ No new CVEs found")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error updating CVE database: {e}")
        return False


async def update_cve_db():
    """–ü—Ä–æ—Å—Ç–æ–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CVE –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print(f"[{datetime.utcnow().isoformat()}] Checking for CVE updates...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        if is_database_empty():
            print("‚ùå Database is empty! Please run 'python3 load_cve_data.py' first to load initial data.")
            return False
        
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10,000 CVE
        # –≠—Ç–æ –ø–æ–∫—Ä–æ–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ CVE –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
        print("üîÑ Loading recent CVEs for update...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CVE
        initial_data = await fetch_cve(start_index=0, results_per_page=1)
        total_results = initial_data.get('totalResults', 0)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10,000 CVE
        load_limit = min(10000, total_results)
        start_index = max(0, total_results - load_limit)
        
        print(f"Loading last {load_limit} CVEs (from index {start_index} to {total_results})")
        
        all_vulnerabilities = []
        page_size = 2000
        current_index = start_index
        
        while current_index < total_results:
            remaining = total_results - current_index
            current_page_size = min(page_size, remaining)
            
            try:
                data = await fetch_cve(start_index=current_index, results_per_page=current_page_size)
                vulnerabilities = data.get('vulnerabilities', [])
                
                if vulnerabilities:
                    all_vulnerabilities.extend(vulnerabilities)
                    print(f"  ‚úÖ Loaded {len(vulnerabilities)} CVEs")
                else:
                    break
                    
                current_index += current_page_size
                await asyncio.sleep(0.6)
                
            except Exception as e:
                print(f"  ‚ùå Error: {e}")
                break
        
        if all_vulnerabilities:
            print(f"üíæ Updating database with {len(all_vulnerabilities)} CVEs...")
            save_cve_to_db(all_vulnerabilities)  # INSERT OR REPLACE –æ–±–Ω–æ–≤–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
            print(f"‚úÖ Update completed. Processed {len(all_vulnerabilities)} CVEs.")
        else:
            print("‚úÖ No new CVEs found")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error updating CVE database: {e}")
        return False


async def fetch_epss_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ EPSS –∏–∑ FIRST.org API"""
    try:
        print(f"[{datetime.utcnow().isoformat()}] –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ EPSS...")
        
        all_epss_data = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥–∞–º, –Ω–∞—á–∏–Ω–∞—è —Å 2021 –≥–æ–¥–∞
        years = ['2021', '2022', '2023', '2024', '2025']
        
        async with aiohttp.ClientSession() as session:
            for year in years:
                print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º EPSS –¥–∞–Ω–Ω—ã–µ –∑–∞ {year} –≥–æ–¥...")
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ–¥
                params = {
                    'date': f'{year}-01-01',
                    'limit': '100000'
                }
                
                try:
                    async with session.get(EPSS_API_URL, params=params) as resp:
                        if resp.status == 200:
                            data = await resp.json()
                            epss_data = data.get('data', [])
                            
                            if epss_data:
                                all_epss_data.extend(epss_data)
                                print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(epss_data)} –∑–∞–ø–∏—Å–µ–π EPSS –∑–∞ {year} –≥–æ–¥")
                                
                                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                                await asyncio.sleep(1)
                            else:
                                print(f"  ‚ö†Ô∏è  –ù–µ—Ç EPSS –¥–∞–Ω–Ω—ã—Ö –∑–∞ {year} –≥–æ–¥")
                        else:
                            print(f"  ‚ùå HTTP {resp.status} –¥–ª—è {year} –≥–æ–¥–∞")
                            
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ EPSS –¥–∞–Ω–Ω—ã—Ö –∑–∞ {year} –≥–æ–¥: {e}")
                    continue
        
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_epss_data)} –∑–∞–ø–∏—Å–µ–π EPSS")
        return all_epss_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ EPSS –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def save_epss_to_db(epss_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ EPSS –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º EPSS –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö CVE
        updated_count = 0
        for item in epss_data:
            cve_id = item.get('cve')
            epss_score = item.get('epss')
            
            if cve_id and epss_score is not None:
                c.execute("""
                    UPDATE cve 
                    SET epss = ? 
                    WHERE id = ?
                """, (float(epss_score), cve_id))
                
                if c.rowcount > 0:
                    updated_count += 1
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} CVE —Å EPSS –¥–∞–Ω–Ω—ã–º–∏")
        return updated_count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è EPSS –¥–∞–Ω–Ω—ã—Ö: {e}")
        return 0

async def load_epss_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ EPSS"""
    try:
        print(f"[{datetime.utcnow().isoformat()}] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É EPSS –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ EPSS
        epss_data = await fetch_epss_data()
        
        if not epss_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ EPSS")
            return False
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(epss_data)} –∑–∞–ø–∏—Å–µ–π EPSS")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        updated_count = save_epss_to_db(epss_data)
        
        if updated_count > 0:
            print(f"‚úÖ EPSS –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {updated_count} CVE")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è EPSS
            update_epss_metadata()
            return True
        else:
            print("‚ö†Ô∏è  EPSS –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö CVE –≤ –±–∞–∑–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ EPSS –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def update_epss_metadata():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ EPSS"""
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        c.execute("""
            CREATE TABLE IF NOT EXISTS db_metadata (
                key TEXT PRIMARY KEY,
                value TEXT
            )
        """)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è EPSS
        current_time = datetime.utcnow().isoformat() + 'Z'
        c.execute("""
            INSERT OR REPLACE INTO db_metadata (key, value) 
            VALUES ('last_epss_update', ?)
        """, (current_time,))
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö EPSS: {e}")

def get_last_epss_update():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è EPSS"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute("SELECT value FROM db_metadata WHERE key = 'last_epss_update'")
        result = cursor.fetchone()
        conn.close()
        
        return result[0] if result and result[0] else None
    except:
        return None

async def should_update_epss():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å EPSS –¥–∞–Ω–Ω—ã–µ"""
    try:
        last_update = get_last_epss_update()
        
        if not last_update:
            print("üìä EPSS –¥–∞–Ω–Ω—ã–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –±–æ–ª—å—à–µ —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        from datetime import datetime as dt, timezone
        last_update_dt = dt.fromisoformat(last_update.replace('Z', '+00:00'))
        now = dt.now(timezone.utc)
        
        time_diff = (now - last_update_dt).total_seconds()
        hours_passed = time_diff / 3600
        
        print(f"üìä –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ EPSS: {hours_passed:.1f} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥")
        
        return hours_passed >= 1  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è EPSS: {e}")
        return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º

async def update_all_periodically(interval_seconds: int = 3600):
    """–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CVE –∏ EPSS –∫–∞–∂–¥—ã–µ interval_seconds —Å–µ–∫—É–Ω–¥"""
    while True:
        # –û–±–Ω–æ–≤–ª—è–µ–º CVE –¥–∞–Ω–Ω—ã–µ
        await update_cve_db()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º EPSS –¥–∞–Ω–Ω—ã–µ
        if await should_update_epss():
            print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º EPSS –¥–∞–Ω–Ω—ã–µ...")
            await load_epss_data()
        else:
            print("‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ EPSS (–µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ —á–∞—Å–∞)")
        
        await asyncio.sleep(interval_seconds)
